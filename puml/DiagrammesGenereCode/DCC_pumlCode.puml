@startuml

'UML GENERE PAR CODE :)

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide empty members

PACKAGE western{
	CLASS Barman  extends Personnage {
		+<<create>>Barman(nom : String)
		+<<create>>Barman(nom : String, nomBar : String)
		-bar : String
		+getNom() : String
		+getBar() : String
		+getPseudo() : String
		+servir(personne : Personnage)
		+getClients() : Boisson[]
	}
Barman o--> "-clients  \n0..*"Boisson



	CLASS Boisson  {
		+{static}of(nom : String, genre : Genre) : Boisson
		-<<create>>Boisson(nom : String, genre : Genre)
		+getNom() : String
		+getGenre() : Genre
		+getNomAvecArticleIndefini() : String
		+getNomAvecArticlePartitif() : String
		+getNomAvecArticleDefini() : String
		+getNomAvecPreposition(preposition : String) : String
	}
Boisson o--> "-substantif \n1"Substantif
Boisson o--> "+{static}EAU \n1"Boisson
Boisson o--> "-{static}boissons  \n0..*"Boisson


Boisson ..> Genre : "<<use>>"

	CLASS Brigand  extends Personnage implements HorsLaLoi {
		#{static}LOOK_PAR_DEFAUT : String
		-look : String
		-recompense : Integer
		-estLibre : Boolean
		+<<create>>Brigand(nom : String)
		+<<create>>Brigand(nom : String, boisson : Boisson)
		+<<create>>Brigand(nom : String, boisson : Boisson, look : String)
		+getLook() : String
		+getRecompense() : Integer
		+estLibre() : Boolean
		+kidnapper(dame : Dame)
		+getCaptives() : Dame[]
		+seFaireCapturer(cowBoy : Cowboy)
		+seFaireTirerDessus(cowBoy : Cowboy)
		+getPseudo() : String
		+sePresenter()
		+{static}getBoissonParDefaut() : Boisson
		+{static}setBoissonParDefaut(boisson : Boisson)
	}
Brigand o--> "-captives  \n0..*"Dame
Brigand o--> "-gardien \n1"Cowboy
Brigand o--> "-{static}boissonParDefaut \n1"Boisson



	CLASS Cowboy  extends Personnage {
		-gains : Integer
		+<<create>>Cowboy(nom : String)
		+<<create>>Cowboy(nom : String, boisson : Boisson)
		+getPseudo() : String
		+liberer(dame : Dame)
		+liberer(captives : Dame[])
		+capturer(horsLaLoi : HorsLaLoi)
		+tirerSur(brigand : HorsLaLoi)
		+sePresenter()
		+{static}getBoissonParDefaut() : Boisson
		+{static}setBoissonParDefaut(boisson : Boisson)
	}
Cowboy o--> "-captures  \n0..*"HorsLaLoi
Cowboy o--> "-{static}boissonParDefaut \n1"Boisson



	CLASS Dame  extends Personnage {
		-estLibre : Boolean
		+<<create>>Dame(nom : String)
		+<<create>>Dame(nom : String, boisson : Boisson)
		+getPseudo() : String
		+seFaireKidnapper(horsLaLoi : HorsLaLoi)
		+seFaireLiberer(cowBoy : Cowboy)
		+estLibre() : Boolean
		+sePresenter()
		+{static}getBoissonParDefaut() : Boisson
		+{static}setBoissonParDefaut(boisson : Boisson)
		+getRavisseur() : HorsLaLoi
	}
Dame o--> "-sauveur \n1"Cowboy
Dame o--> "-ravisseur \n1"HorsLaLoi
Dame o--> "-{static}boissonParDefaut \n1"Boisson



	ENUM Genre<<enum>>{
		+{static}values() : Genre[]
		+{static}valueOf(name : String) : Genre
		-<<create>>Genre()

	}

	CLASS Histoire4  {
		+<<create>>Histoire4()
		+{static}main(args : String[])
	}



	CLASS Histoire5  {
		<<create>>Histoire5()
	}
Histoire5 o--> "luke \n1"Barman
Histoire5 o--> "averell \n1"Brigand
Histoire5 o--> "scarlett \n1"Ripou
Histoire5 o--> "narrateur \n1"Narrateur



	INTERFACE HorsLaLoi <<interface>>  implements Nommable{
		+{abstract}estLibre() : Boolean
		+{abstract}getRecompense() : Integer
		+{abstract}kidnapper(dame : Dame)
		+{abstract}seFaireCapturer(cowBoy : Cowboy)
		+{abstract}seFaireTirerDessus(cowBoy : Cowboy)
		+{abstract}getLook() : String
		+{abstract}getCaptives() : Dame[]

	}

	CLASS Narrateur  extends Personnage {
		+<<create>>Narrateur()
		+<<create>>Narrateur(nom : String)
		+dire(texte : String)
		+boire(boisson : Boisson)
		+boire()
		+getPseudo() : String
	}



	INTERFACE Nommable <<interface>> {
		+{abstract}getNom() : String
		+{abstract}getPseudo() : String

	}

	CLASS Personnage  implements Nommable {
		-nom : String
		+<<create>>Personnage(nom : String)
		+<<create>>Personnage(nom : String, boisson : Boisson)
		+dire(texte : String)
		+sePresenter()
		+boire(boisson : Boisson)
		+boire()
		+getNom() : String
		+getBoisson() : Boisson
		+{static}getPseudos(personnages : Nommable[]) : String
		+{static}getBoissonParDefaut() : Boisson
	}
Personnage o--> "-{static}BOISSON_PAR_DEFAUT \n1"Boisson
Personnage o--> "-boisson \n1"Boisson



	CLASS Ripou  extends Cowboy implements HorsLaLoi {
		+<<create>>Ripou(nom : String)
		+<<create>>Ripou(nom : String, boisson : Boisson)
		+<<create>>Ripou(nom : String, boisson : Boisson, look : String)
		+getLook() : String
		+estLibre() : Boolean
		+getRecompense() : Integer
		+kidnapper(dame : Dame)
		+getCaptives() : Dame[]
		+seFaireCapturer(cowBoy : Cowboy)
		+seFaireTirerDessus(cowBoy : Cowboy)
		+getPseudo() : String
		+sePresenter()
		+liberer(dame : Dame)
	}
Ripou o--> "-brigand \n1"Brigand


Ripou ..> Dame : "<<use>>"

	CLASS Sherif  extends Cowboy {
		+<<create>>Sherif(nom : String)
		+<<create>>Sherif(nom : String, boisson : Boisson)
		+getNom() : String
		+getPseudo() : String
		+sePresenter()
		+capturer(horsLaLoi : HorsLaLoi)
		+rechercher(horsLaLoi : HorsLaLoi)
		+getWanted() : HorsLaLoi[]
		+isWanted(horsLaLoi : HorsLaLoi) : Boolean
	}
Sherif o--> "-wanted  \n0..*"HorsLaLoi
Sherif o--> "-ravisseur \n1"HorsLaLoi
Sherif o--> "-captures  \n0..*"HorsLaLoi



	CLASS Substantif  {
		-nom : String
		+<<create>>Substantif(nom : String, genre : Genre)
		+getNom() : String
		+getGenre() : Genre
		+toString() : String
		+{static}isVowel(c : char) : Boolean
		+{static}startsWithVowel(s : String) : Boolean
		+getArticleIndefini() : String
		+avecArticleIndefini() : String
		+{static}getArticleDefini(genre : Genre) : String
		+getArticleDefini() : String
		+avecArticleDefini() : String
		+{static}faireElision(article : String) : String
		+elision() : Boolean
		+getArticlePartitif() : String
		+avecArticlePartitif() : String
		+avecElision(article : String) : String
		+avecPreposition(preposition : String) : String
	}
Substantif o--> "-genre \n1"Genre




}
@enduml
