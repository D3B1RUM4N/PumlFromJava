@startuml

'UML GENERE PAR CODE :)

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide empty members

PACKAGE western{
	CLASS Barman  extends Personnage {
		+<<create>>Barman(nom : String)
		+<<create>>Barman(nom : String, nomBar : String)
		-bar : String
		+getNom() : String
		+getBar() : String
		+getPseudo() : String
		+servir(personne : Personnage)
		+getClients() : Boisson[]
	}
Barman o--> "clients \n0..*"Boisson


Barman ..> Boisson : "<<use>>"

	CLASS Boisson  {
		+{static}of(nom : String, genre : Genre) : Boisson
		-<<create>>Boisson(nom : String, genre : Genre)
		+getNom() : String
		+getGenre() : Genre
		+getNomAvecArticleIndefini() : String
		+getNomAvecArticlePartitif() : String
		+getNomAvecArticleDefini() : String
		+getNomAvecPreposition(preposition : String) : String
	}
Boisson o--> "substantif"Substantif
Boisson o--> "EAU"Boisson
Boisson o--> "boissons \n0..*"Boisson


Boisson ..> Boisson : "<<use>>"
Boisson ..> Genre : "<<use>>"

	CLASS Brigand  extends Personnage implements HorsLaLoi {
		#{static}LOOK_PAR_DEFAUT : String
		-look : String
		-recompense : int
		-estLibre : boolean
		+<<create>>Brigand(nom : String)
		+<<create>>Brigand(nom : String, boisson : Boisson)
		+<<create>>Brigand(nom : String, boisson : Boisson, look : String)
		+getLook() : String
		+getRecompense() : int
		+estLibre() : boolean
		+kidnapper(dame : Dame)
		+getCaptives() : Dame[]
		+seFaireCapturer(cowBoy : Cowboy)
		+seFaireTirerDessus(cowBoy : Cowboy)
		+getPseudo() : String
		+sePresenter()
		+{static}getBoissonParDefaut() : Boisson
		+{static}setBoissonParDefaut(boisson : Boisson)
	}
Brigand o--> "captives \n0..*"Dame
Brigand o--> "gardien"Cowboy
Brigand o--> "boissonParDefaut"Boisson


Brigand ..> Dame : "<<use>>"
Brigand ..> Boisson : "<<use>>"

	CLASS Cowboy  extends Personnage {
		-gains : int
		+<<create>>Cowboy(nom : String)
		+<<create>>Cowboy(nom : String, boisson : Boisson)
		+getPseudo() : String
		+liberer(dame : Dame)
		+liberer(captives : Dame[])
		+capturer(horsLaLoi : HorsLaLoi)
		+tirerSur(brigand : HorsLaLoi)
		+sePresenter()
		+{static}getBoissonParDefaut() : Boisson
		+{static}setBoissonParDefaut(boisson : Boisson)
	}
Cowboy o--> "captures \n0..*"HorsLaLoi
Cowboy o--> "boissonParDefaut"Boisson


Cowboy ..> Boisson : "<<use>>"

	CLASS Dame  extends Personnage {
		-estLibre : boolean
		+<<create>>Dame(nom : String)
		+<<create>>Dame(nom : String, boisson : Boisson)
		+getPseudo() : String
		+seFaireKidnapper(horsLaLoi : HorsLaLoi)
		+seFaireLiberer(cowBoy : Cowboy)
		+estLibre() : boolean
		+sePresenter()
		+{static}getBoissonParDefaut() : Boisson
		+{static}setBoissonParDefaut(boisson : Boisson)
		+getRavisseur() : HorsLaLoi
	}
Dame o--> "sauveur"Cowboy
Dame o--> "ravisseur"HorsLaLoi
Dame o--> "boissonParDefaut"Boisson


Dame ..> Boisson : "<<use>>"
Dame ..> HorsLaLoi : "<<use>>"

	ENUM Genre<<enum>>{

	}

	CLASS Histoire4  {
		+<<create>>Histoire4()
		+{static}main(args : String[])
	}



	CLASS Histoire5  {
		<<create>>Histoire5()
	}
Histoire5 o--> "luke"Barman
Histoire5 o--> "averell"Brigand
Histoire5 o--> "scarlett"Ripou
Histoire5 o--> "narrateur"Narrateur



	INTERFACE HorsLaLoi <<interface>>  implements Nommable{

	}

	CLASS Narrateur  extends Personnage {
		+<<create>>Narrateur()
		+<<create>>Narrateur(nom : String)
		+dire(texte : String)
		+boire(boisson : Boisson)
		+boire()
		+getPseudo() : String
	}



	INTERFACE Nommable <<interface>> {

	}

	CLASS Personnage  implements Nommable {
		-nom : String
		+<<create>>Personnage(nom : String)
		+<<create>>Personnage(nom : String, boisson : Boisson)
		+dire(texte : String)
		+sePresenter()
		+boire(boisson : Boisson)
		+boire()
		+getNom() : String
		+getBoisson() : Boisson
		+{static}getPseudos(personnages : Nommable[]) : String
		+{static}getBoissonParDefaut() : Boisson
	}
Personnage o--> "BOISSON_PAR_DEFAUT"Boisson
Personnage o--> "boisson"Boisson


Personnage ..> Boisson : "<<use>>"

	CLASS Ripou  extends Cowboy implements HorsLaLoi {
		+<<create>>Ripou(nom : String)
		+<<create>>Ripou(nom : String, boisson : Boisson)
		+<<create>>Ripou(nom : String, boisson : Boisson, look : String)
		+getLook() : String
		+estLibre() : boolean
		+getRecompense() : int
		+kidnapper(dame : Dame)
		+getCaptives() : Dame[]
		+seFaireCapturer(cowBoy : Cowboy)
		+seFaireTirerDessus(cowBoy : Cowboy)
		+getPseudo() : String
		+sePresenter()
		+liberer(dame : Dame)
	}
Ripou o--> "brigand"Brigand


Ripou ..> Dame : "<<use>>"

	CLASS Sherif  extends Cowboy {
		+<<create>>Sherif(nom : String)
		+<<create>>Sherif(nom : String, boisson : Boisson)
		+getNom() : String
		+getPseudo() : String
		+sePresenter()
		+capturer(horsLaLoi : HorsLaLoi)
		+rechercher(horsLaLoi : HorsLaLoi)
		+getWanted() : HorsLaLoi[]
		+isWanted(horsLaLoi : HorsLaLoi) : boolean
	}
Sherif o--> "wanted \n0..*"HorsLaLoi
Sherif o--> "ravisseur"HorsLaLoi
Sherif o--> "captures \n0..*"HorsLaLoi


Sherif ..> HorsLaLoi : "<<use>>"

	CLASS Substantif  {
		-nom : String
		+<<create>>Substantif(nom : String, genre : Genre)
		+getNom() : String
		+getGenre() : Genre
		+toString() : String
		+{static}isVowel(c : char) : boolean
		+{static}startsWithVowel(s : String) : boolean
		+getArticleIndefini() : String
		+avecArticleIndefini() : String
		+{static}getArticleDefini(genre : Genre) : String
		+getArticleDefini() : String
		+avecArticleDefini() : String
		+{static}faireElision(article : String) : String
		+elision() : boolean
		+getArticlePartitif() : String
		+avecArticlePartitif() : String
		+avecElision(article : String) : String
		+avecPreposition(preposition : String) : String
	}
Substantif o--> "genre"Genre


Substantif ..> Genre : "<<use>>"


}
@enduml
